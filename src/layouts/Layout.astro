---
import Nav from '../components/Nav.astro';
import { getCategoryNames } from '../queries/Category';
import '@fontsource/noto-serif';
import '../styles/global.css';

export interface Props {
  title: string;
  color?: string;
  backgroundColor?: string;
  nav?: boolean;
}

// THEME DEFAULT COLORS SET HERE,
// to allow conditional and default colors in body element
const {
  title,
  color = '#301B05',
  backgroundColor = '#c0fda1',
  nav,
} = Astro.props;

const categories = await getCategoryNames();
---

<!DOCTYPE html>
<html lang='en'>
  <meta charset='UTF-8' />
  <meta name='viewport' content='width=device-width' />
  <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
  <meta name='generator' content={Astro.generator} />
  <title>Diane Esnault | {title}</title>

  <style define:vars={{ color, backgroundColor }}>
    body {
      color: var(--color);
      background-color: var(--backgroundColor);
    }
  </style>

  <body>
    <div id='canvas' class='z-10 h-full w-full absolute'>
      {nav ? <Nav categories={categories} /> : null}
      <slot />
    </div>

    <script is:inline defer>
      // Mouse trail script
      const canvas = document.getElementById('canvas');

      canvas.addEventListener(
        'mousemove',
        function (e) {
          const pos = getMousePos(e);
          draw(pos);
        },
        false
      );

      function draw(pos) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        dot.style.position = 'absolute';
        dot.style.top = pos.y + 'px';
        dot.style.left = pos.x + 'px';
        dot.style.width = '8px';
        dot.style.height = '8px';
        dot.style.backgroundColor = '#301B05';
        dot.style.opacity = 0.3;
        dot.style.transition = 'opacity';
        dot.style.pointerEvents = 'none';
        dot.style.borderRadius = '100%';
        dot.style.boxShadow = 'rgba(0, 0, 0, 0.5) 0px 0px 8px';
        dot.style.scale = 1;
        canvas.appendChild(dot);
        setTimeout(() => {
          setInterval(() => {
            dot.style.opacity -= 0.04;
            dot.style.scale -= 0.1;
          }, 90);
        }, 800);
        setTimeout(() => {
          dot.remove();
        }, 2000);
      }

      function getMousePos(e) {
        var rect = canvas.getBoundingClientRect();
        return {
          x: e.clientX - rect.left,
          y: e.clientY - rect.top,
        };
      }
    </script>
  </body>
</html>
